import 'package:flutter/material.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  // ===== Helpers: Popup ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏ö‡∏ö =====
  Future<void> _showSheet(
    BuildContext context, {
    required String title,
    required String message,
    List<Widget> actions = const [],
    String? imageUrl, // <‚Äî ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏π‡∏õ
  }) {
    final cs = Theme.of(context).colorScheme;

    void _openImageViewer() {
      if (imageUrl == null) return;
      showDialog(
        context: context,
        builder: (_) => Dialog(
          insetPadding: const EdgeInsets.all(12),
          backgroundColor: Colors.black,
          child: GestureDetector(
            onTap: () => Navigator.pop(context),
            child: InteractiveViewer(
              maxScale: 4,
              child: AspectRatio(
                aspectRatio: 16 / 9,
                child: Image.network(imageUrl, fit: BoxFit.contain),
              ),
            ),
          ),
        ),
      );
    }

    return showModalBottomSheet(
      context: context,
      showDragHandle: true,
      isScrollControlled: true, // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏ç‡πà
      backgroundColor: Theme.of(context).colorScheme.surface,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (_) => Padding(
        padding: const EdgeInsets.fromLTRB(16, 12, 16, 24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // Header
            ListTile(
              contentPadding: EdgeInsets.zero,
              leading: CircleAvatar(
                backgroundColor: cs.primary.withOpacity(.12),
                child: Icon(Icons.touch_app, color: cs.primary),
              ),
              title: Text(title, style: const TextStyle(fontWeight: FontWeight.w700)),
              subtitle: Text(message),
            ),

            // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if (imageUrl != null) ...[
              const SizedBox(height: 12),
              GestureDetector(
                onTap: _openImageViewer,
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(14),
                  child: AspectRatio(
                    aspectRatio: 16 / 9,
                    child: Image.network(
                      imageUrl,
                      fit: BoxFit.cover,
                      // ‡πÅ‡∏™‡∏î‡∏á progress ‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î
                      loadingBuilder: (context, child, progress) {
                        if (progress == null) return child;
                        return Stack(
                          fit: StackFit.expand,
                          children: [
                            Container(color: Theme.of(context).colorScheme.surfaceVariant.withOpacity(.3)),
                            Center(
                              child: CircularProgressIndicator(
                                value: progress.expectedTotalBytes != null
                                    ? progress.cumulativeBytesLoaded /
                                        (progress.expectedTotalBytes ?? 1)
                                    : null,
                              ),
                            ),
                          ],
                        );
                      },
                      // ‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏û‡∏±‡∏á
                      errorBuilder: (context, _, __) => Container(
                        color: Theme.of(context).colorScheme.surfaceVariant.withOpacity(.3),
                        alignment: Alignment.center,
                        child: const Icon(Icons.broken_image),
                      ),
                    ),
                  ),
                ),
              ),
            ],

            const SizedBox(height: 12),
            Row(
              children: [
                Expanded(
                  child: OutlinedButton(
                    onPressed: () => Navigator.pop(context),
                    child: const Text('‡∏õ‡∏¥‡∏î'),
                  ),
                ),
                const SizedBox(width: 12),
                ...actions.isEmpty
                    ? []
                    : [
                        Expanded(
                          child: FilledButton(
                            onPressed: () {
                              Navigator.pop(context);
                              // ‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‚Ä¶
                            },
                            child: const Text('‡∏ï‡∏Å‡∏•‡∏á'),
                          ),
                        ),
                      ],
              ],
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _showDialog(BuildContext context,
      {required String title, required String message}) {
    return showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text(title),
        content: Text(message),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: const Text('‡∏õ‡∏¥‡∏î')),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final cs = Theme.of(context).colorScheme;

    return CustomScrollView(
      key: const PageStorageKey('home'),
      slivers: [
        SliverAppBar(
          pinned: true,
          expandedHeight: 180,
          elevation: 0,
          flexibleSpace: FlexibleSpaceBar(
            titlePadding: const EdgeInsetsDirectional.only(start: 16, bottom: 12),
            title: const Text('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ üëã', style: TextStyle(color: Colors.white)),
            background: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [cs.primary.withOpacity(.95), cs.secondary.withOpacity(.9)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
              child: Padding(
                padding: const EdgeInsets.fromLTRB(16, 56, 16, 16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤',
                      style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                        color: Colors.white, fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 6),
                    Text('‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
                      style: Theme.of(context).textTheme.bodyMedium?.copyWith(color: Colors.white70),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),

        SliverToBoxAdapter(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                // Featured cards (PageView)
                SizedBox(
                  height: 160,
                  child: PageView.builder(
                    controller: PageController(viewportFraction: .9),
                    itemCount: 3,
                    itemBuilder: (context, i) => _FeatureCard(
                      index: i,
                      onTap: () => _showSheet(
                        context,
                        title: '‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå #${i + 1}',
                        message: '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏Ç‡∏≠‡∏á‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${i + 1}',
                        actions: const [SizedBox()], // ‡πÇ‡∏ä‡∏ß‡πå‡∏õ‡∏∏‡πà‡∏° "‡∏ï‡∏Å‡∏•‡∏á"
                        // imageUrl: 'https://img5.pic.in.th/file/secure-sv1/x10196c7831286c646.jpg', // <‚Äî ‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ó‡∏ô
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 16),

                // Quick actions
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text('‡∏ó‡∏≤‡∏á‡∏•‡∏±‡∏î', style: Theme.of(context).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w700)),
                    TextButton(
                      onPressed: () => _showDialog(
                        context,
                        title: '‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                        message: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏≤‡∏á‡∏•‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                      ),
                      child: const Text('‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                GridView(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 4, mainAxisSpacing: 12, crossAxisSpacing: 12,
                  ),
                  children: [
                    _ActionIcon(icon: Icons.event, label: '‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô',
                      onTap: () => _showSheet(context, title: '‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô', message: '‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà?')),
                    _ActionIcon(icon: Icons.task_alt, label: '‡∏á‡∏≤‡∏ô',
                      onTap: () => _showSheet(context, title: '‡∏á‡∏≤‡∏ô', message: '‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà')),
                    _ActionIcon(icon: Icons.insert_chart_outlined, label: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥',
                      onTap: () => _showSheet(context, title: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', message: '‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå')),
                    _ActionIcon(icon: Icons.settings, label: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤',
                      onTap: () => _showSheet(context, title: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤', message: '‡∏õ‡∏£‡∏±‡∏ö‡∏ò‡∏µ‡∏° ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß')),
                  ],
                ),
                const SizedBox(height: 16),

                // List cards
                Align(
                  alignment: Alignment.centerLeft,
                  child: Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', style: Theme.of(context).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w700)),
                ),
                const SizedBox(height: 8),
                ...List.generate(5, (i) => _UpdateTile(
                      index: i,
                      onTap: () => _showSheet(
                        context,
                        title: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà ${i + 1}',
                        message: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (id: ${i + 1})',
                        imageUrl: 'https://picsum.photos/seed/update_$i/1200/675', // <‚Äî ‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ó‡∏ô
                      ),
                    )),
              ],
            ),
          ),
        ),
      ],
    );
  }
}

class _FeatureCard extends StatelessWidget {
  const _FeatureCard({required this.index, this.onTap});
  final int index;
  final VoidCallback? onTap;

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.only(right: 12),
      elevation: 0,
      clipBehavior: Clip.antiAlias,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Ink(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Theme.of(context).colorScheme.primaryContainer,
              Theme.of(context).colorScheme.tertiaryContainer,
            ],
          ),
        ),
        child: InkWell(
          onTap: onTap,
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Row(
              children: [
                const Icon(Icons.bolt, size: 48),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå #${index + 1}',
                          style: Theme.of(context).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w700)),
                      const SizedBox(height: 6),
                      Text('‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
                          style: Theme.of(context).textTheme.bodyMedium),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class _ActionIcon extends StatelessWidget {
  const _ActionIcon({required this.icon, required this.label, this.onTap});
  final IconData icon;
  final String label;
  final VoidCallback? onTap;

  @override
  Widget build(BuildContext context) {
    final cs = Theme.of(context).colorScheme;
    return Material(
      color: Theme.of(context).cardColor,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      elevation: 0,
      child: InkWell(
        borderRadius: BorderRadius.circular(16),
        onTap: onTap,
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 14),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 26, color: cs.primary),
              const SizedBox(height: 6),
              Text(label, style: const TextStyle(fontSize: 12)),
            ],
          ),
        ),
      ),
    );
  }
}

class _UpdateTile extends StatelessWidget {
  const _UpdateTile({required this.index, this.onTap});
  final int index;
  final VoidCallback? onTap;

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 0,
      margin: const EdgeInsets.only(bottom: 12),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: ListTile(
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        leading: CircleAvatar(
          radius: 22,
          backgroundColor: Theme.of(context).colorScheme.primary.withOpacity(.12),
          child: const Icon(Icons.notifications),
        ),
        title: Text('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà ${index + 1}', style: const TextStyle(fontWeight: FontWeight.w600)),
        subtitle: const Text('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'),
        trailing: const Icon(Icons.chevron_right),
        onTap: onTap,
      ),
    );
  }
}
